// Code generated by ogen, DO NOT EDIT.

package oas

import (
	"context"
	"net/http"
	"strings"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/ogenerrors"
)

// SecurityHandler is handler for security parameters.
type SecurityHandler interface {
	// HandleXRiotToken handles X-Riot-Token security.
	// API key in header.
	HandleXRiotToken(ctx context.Context, operationName OperationName, t XRiotToken) (context.Context, error)
	// HandleAPIKey handles api_key security.
	// API key in query param.
	HandleAPIKey(ctx context.Context, operationName OperationName, t APIKey) (context.Context, error)
	// HandleRso handles rso security.
	// Riot Sign-On (RSO).
	HandleRso(ctx context.Context, operationName OperationName, t Rso) (context.Context, error)
}

func findAuthorization(h http.Header, prefix string) (string, bool) {
	v, ok := h["Authorization"]
	if !ok {
		return "", false
	}
	for _, vv := range v {
		scheme, value, ok := strings.Cut(vv, " ")
		if !ok || !strings.EqualFold(scheme, prefix) {
			continue
		}
		return value, true
	}
	return "", false
}

func (s *Server) securityXRiotToken(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t XRiotToken
	const parameterName = "X-Riot-Token"
	value := req.Header.Get(parameterName)
	if value == "" {
		return ctx, false, nil
	}
	t.APIKey = value
	rctx, err := s.sec.HandleXRiotToken(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}
func (s *Server) securityAPIKey(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t APIKey
	const parameterName = "api_key"
	q := req.URL.Query()
	if !q.Has(parameterName) {
		return ctx, false, nil
	}
	value := q.Get(parameterName)
	t.APIKey = value
	rctx, err := s.sec.HandleAPIKey(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

var oauth2ScopesRso = map[string][]string{
	AccountV1GetByAccessTokenOperation: []string{
		"openid",
	},
	LolRsoMatchV1GetMatchOperation: []string{
		"openid",
	},
	LolRsoMatchV1GetMatchIdsOperation: []string{
		"openid",
	},
	LolRsoMatchV1GetTimelineOperation: []string{
		"openid",
	},
	LorDeckV1CreateDeckOperation: []string{
		"openid",
	},
	LorDeckV1GetDecksOperation: []string{
		"openid",
	},
	LorInventoryV1GetCardsOperation: []string{
		"openid",
	},
	SummonerV4GetByAccessTokenOperation: []string{
		"openid",
	},
	TftSummonerV1GetByAccessTokenOperation: []string{
		"openid",
	},
}

func (s *Server) securityRso(ctx context.Context, operationName OperationName, req *http.Request) (context.Context, bool, error) {
	var t Rso
	token, ok := findAuthorization(req.Header, "Bearer")
	if !ok {
		return ctx, false, nil
	}
	t.Token = token
	t.Scopes = oauth2ScopesRso[operationName]
	rctx, err := s.sec.HandleRso(ctx, operationName, t)
	if errors.Is(err, ogenerrors.ErrSkipServerSecurity) {
		return nil, false, nil
	} else if err != nil {
		return nil, false, err
	}
	return rctx, true, err
}

// SecuritySource is provider of security values (tokens, passwords, etc.).
type SecuritySource interface {
	// XRiotToken provides X-Riot-Token security value.
	// API key in header.
	XRiotToken(ctx context.Context, operationName OperationName) (XRiotToken, error)
	// APIKey provides api_key security value.
	// API key in query param.
	APIKey(ctx context.Context, operationName OperationName) (APIKey, error)
	// Rso provides rso security value.
	// Riot Sign-On (RSO).
	Rso(ctx context.Context, operationName OperationName) (Rso, error)
}

func (s *Client) securityXRiotToken(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.XRiotToken(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"XRiotToken\"")
	}
	req.Header.Set("X-Riot-Token", t.APIKey)
	return nil
}
func (s *Client) securityAPIKey(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.APIKey(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"APIKey\"")
	}
	q := req.URL.Query()
	q.Set("api_key", t.APIKey)
	req.URL.RawQuery = q.Encode()
	return nil
}
func (s *Client) securityRso(ctx context.Context, operationName OperationName, req *http.Request) error {
	t, err := s.sec.Rso(ctx, operationName)
	if err != nil {
		return errors.Wrap(err, "security source \"Rso\"")
	}
	req.Header.Set("Authorization", "Bearer "+t.Token)
	return nil
}
